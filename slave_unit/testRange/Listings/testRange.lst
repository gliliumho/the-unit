C51 COMPILER V9.54   TESTRANGE                                                             08/05/2015 19:11:11 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE TESTRANGE
OBJECT MODULE PLACED IN .\Objects\testRange.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE testRange.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings
                    -\testRange.lst) TABS(2) OBJECT(.\Objects\testRange.obj)

line level    source

   1          
   2          #include <Nordic\reg9e5.h>
   3          
   4          #define HFREQ 0   // 0=433MHz, 1=868/915MHz
   5          #define POWER 3   // 0=min power...3 = max power
   6          
   7          void InitPin(unsigned char pinNum, direction){
   8   1        switch(pinNum){
   9   2          case 0:
  10   2            P0_ALT &= 0xFE;
  11   2            if (direction == 1) P0_DIR |= 0x01;
  12   2            else P0_DIR &= 0xFE;
  13   2            break;
  14   2          
  15   2          case 1:
  16   2            P0_ALT &= 0xFD;
  17   2            if (direction == 1) P0_DIR |= 0x02;
  18   2            else P0_DIR &= 0xFD;
  19   2            break;
  20   2          
  21   2          case 2:
  22   2            P0_ALT &= 0xFB;
  23   2            if (direction == 1) P0_DIR |= 0x04;
  24   2            else P0_DIR &= 0xFB;
  25   2            break;
  26   2            
  27   2          case 3:
  28   2            P0_ALT &= 0xF7;
  29   2            if (direction == 1) P0_DIR |= 0x08;
  30   2            else P0_DIR &= 0xF7;
  31   2            break;
  32   2          
  33   2          case 4:
  34   2            P0_ALT &= 0xEF;
  35   2            if (direction == 1) P0_DIR |= 0x10;
  36   2            else P0_DIR &= 0xEF;
  37   2            break;
  38   2          
  39   2          case 5:
  40   2            P0_ALT &= 0xDF;
  41   2            if (direction == 1) P0_DIR |= 0x20;
  42   2            else P0_DIR &= 0xDF;
  43   2            break;
  44   2          
  45   2          case 6:
  46   2            P0_ALT &= 0xBF;
  47   2            if (direction == 1) P0_DIR |= 0x40;
  48   2            else P0_DIR &= 0xBF;
  49   2            break;
  50   2            
  51   2          case 7:
  52   2            P0_ALT &= 0x7F;
  53   2            if (direction == 1) P0_DIR |= 0x80;
  54   2            else P0_DIR &= 0x7F;
C51 COMPILER V9.54   TESTRANGE                                                             08/05/2015 19:11:11 PAGE 2   

  55   2            break;  
  56   2            
  57   2          case 8:
  58   2            P0_ALT = 0x00;
  59   2            if (direction == 1) P0_DIR = 0xFF;
  60   2            else P0_DIR = 0x00;
  61   2            break;
  62   2            
  63   2          default:
  64   2            break;
  65   2            
  66   2        }
  67   1      
  68   1      }
  69          
  70          /* ---SetTXPower() & SetFrequency()------------------------
  71          ---------------------------------------------
  72          Currently not used and not working. 
  73          ---------------------------------------------
  74          void SetTXPower(unsigned char powerlevel){
  75            switch(powerlevel){
  76              case 0:
  77                CC &= 0xF3FF;
  78                break;
  79              case 1:
  80                CC &= 0xF7FF;
  81                CC |= 0x0400;
  82                break;
  83              case 2:
  84                CC &= 0xFBFF;
  85                CC |= 0x0800;
  86                break;
  87              case 3:
  88                CC |= 0x0C00;
  89                break;
  90            }
  91          }
  92          
  93          
  94          ------------------------------------------
  95          Currently not used and not working. 
  96          ------------------------------------------
  97          void SetFrequency(unsigned char freq){
  98            if(freq == 1)
  99              CC |= 0x0200;
 100            else
 101              CC &= 0xFDFF;
 102          } 
 103          */
 104          
 105          
 106          void Delay400us(volatile unsigned char n){
 107   1        unsigned char i;
 108   1        while(n--)
 109   1          for(i=0;i<35;i++)
 110   1            ;
 111   1      }
 112          
 113          void Delay5ms(volatile unsigned char n){
 114   1        while(n--)
 115   1          Delay400us(50);
 116   1      }
C51 COMPILER V9.54   TESTRANGE                                                             08/05/2015 19:11:11 PAGE 3   

 117          
 118          unsigned char SpiReadWrite(unsigned char b){
 119   1        EXIF &= ~0x20;          // Clear SPI interrupt
 120   1        SPI_DATA = b;           // Move byte to send to SPI data register
 121   1        while((EXIF & 0x20) == 0x00)  // Wait until SPI has finished transmitting
 122   1          ;
 123   1        return SPI_DATA;
 124   1      }
 125          
 126          void TransmitPacket(unsigned char b){
 127   1        RACSN = 0;
 128   1        SpiReadWrite(WTP);
 129   1        SpiReadWrite(b);
 130   1        RACSN = 1;
 131   1        TRX_CE = 1;
 132   1        Delay400us(1);
 133   1        TRX_CE = 0;
 134   1      }
 135          
 136          unsigned char ReceivePacket(void){
 137   1        unsigned char b;
 138   1      
 139   1        TRX_CE = 1;
 140   1      
 141   1        while(DR == 0)
 142   1          ;
 143   1        RACSN = 0;
 144   1        SpiReadWrite(RRP);
 145   1        b = SpiReadWrite(0);
 146   1        RACSN = 1;
 147   1        TRX_CE = 0;
 148   1        return b;
 149   1      }
 150          
 151          void InitUART(void){
 152   1        
 153   1        unsigned char cklf;
 154   1        
 155   1        TH1 = 0xE6;           // 9600@16MHz (when T1M=1 and SMOD=1)
 156   1        CKCON |= 0x10;          // T1M=1 (/4 timer clock)
 157   1        PCON = 0x80;          // SMOD=1 (double baud rate)
 158   1        SCON = 0x52;          // Serial mode1, enable receiver
 159   1        TMOD = 0x20;          // Timer1 8bit auto reload 
 160   1        TR1 = 1;            // Start timer1
 161   1        P0_ALT |= 0x06; //select alternative function for P01 and P02
 162   1        P0_DIR &= 0x02; //P01(RXD) is input
 163   1        
 164   1        SPICLK = 0;     //Max SPI clock
 165   1        SPI_CTRL = 0x02;
 166   1        
 167   1        // Switch to 16MHz clock:
 168   1        RACSN = 0;
 169   1        SpiReadWrite(RRC | 0x09);
 170   1        cklf = SpiReadWrite(0) | 0x04;  //XO_DIRECT = 1, follow XO_Frequency
 171   1        RACSN = 1;
 172   1        RACSN = 0;
 173   1        SpiReadWrite(WRC | 0x09);
 174   1        SpiReadWrite(cklf);
 175   1        RACSN = 1;
 176   1      }
 177          
 178          void PutChar(unsigned char c){
C51 COMPILER V9.54   TESTRANGE                                                             08/05/2015 19:11:11 PAGE 4   

 179   1        while(!TI)
 180   1          ;
 181   1        TI = 0;
 182   1        SBUF = c;
 183   1      }
 184          
 185          void PutString(unsigned char *s){
 186   1        while(*s != 0)
 187   1          PutChar(*s++);
 188   1      }
 189          
 190          void GetChar(unsigned char *c){
 191   1        while(!RI)
 192   1          ;
 193   1        RI=0;
 194   1        *c = SBUF;
 195   1      }
 196          
 197          void GetString(unsigned char *s){
 198   1        GetChar(s);
 199   1        while(*s!= 0x0D && *s!= 0x0A){  //GetChar as long as not ENTER.
 200   2          s++;
 201   2          GetChar(s);
 202   2        }
 203   1        *s = 0;
 204   1      }
 205          
 206          void ConsoleComment(void){
 207   1        unsigned char c = 0x00;
 208   1        
 209   1        GetChar(&c);
 210   1        while(c!=0x0D && c!=0x0A){
 211   2          PutChar(c);
 212   2          GetChar(&c);
 213   2        }
 214   1        PutString("\r\nDone!\r\n");
 215   1      }
 216          
 217          void SetAutoRetransmit(unsigned char setting){
 218   1        
 219   1        unsigned char tmp;
 220   1        
 221   1        RACSN = 0;
 222   1        SpiReadWrite(RRC | 0x01);       //Read RF config address byte #1
 223   1        tmp = SpiReadWrite(0) & 0xDF;   //store current RF config and clear off AUTORETRAN bit
 224   1        RACSN = 1;
 225   1        
 226   1        RACSN = 0;
 227   1        SpiReadWrite(WRC | 0x01);     //Write RF config at addr byte #1
 228   1        SpiReadWrite(tmp | (setting <<5));  //change the AUTORETRAN setting
 229   1        RACSN = 1;
 230   1      }
 231          
 232          void InitRF(void){
 233   1        
 234   1        unsigned char tmp;
 235   1        
 236   1        SPICLK = 0;           //Max SPI clock
 237   1        SPI_CTRL = 0x02;
 238   1        
 239   1        //Configure RF
 240   1        RACSN = 0;
C51 COMPILER V9.54   TESTRANGE                                                             08/05/2015 19:11:11 PAGE 5   

 241   1        SpiReadWrite(WRC | 0x03);    // Write to RF config address 3 (RX payload)
 242   1        SpiReadWrite(0x01);      // One byte RX payload width
 243   1        SpiReadWrite(0x01);      // One byte TX payload width
 244   1        RACSN = 1;
 245   1      
 246   1        RACSN = 0;
 247   1        SpiReadWrite(RRC | 0x01);    // Read RF config address 1
 248   1        tmp = SpiReadWrite(0) & 0xf1;   // Clear the power and frequency setting bits
 249   1        RACSN = 1;
 250   1      
 251   1        RACSN = 0;
 252   1        SpiReadWrite(WRC | 0x01);   // Write RF config address 1
 253   1        // Change power defined by POWER and to 433 or 868/915MHz defined by HFREQ above:
 254   1        SpiReadWrite(tmp | (POWER <<2) | (HFREQ << 1));
 255   1        RACSN = 1;
 256   1        
 257   1      }
 258          
 259          
 260          void Transmitter(void){
 261   1        
 262   1        unsigned char i,j,n = 0x30;
 263   1        TXEN = 1;
 264   1        
 265   1        
 266   1        //transmit 0x2B to indicate start of transmitter
 267   1        
 268   1        
 269   1        while(1){
 270   2          if(P03 == 0){
 271   3            
 272   3            for(i=0;i<5;i++)
 273   3              TransmitPacket(0x01);
 274   3            
 275   3            Delay5ms(30);   //delay 0.25s
 276   3            TransmitPacket(n);
 277   3            Delay5ms(10);
 278   3            n++;
 279   3            if (n > 0x39)
 280   3              n = 0x30;
 281   3            P00 = 0;
 282   3            
 283   3            for(i=0x61; i<=0x69; i++){
 284   4              TransmitPacket(i);
 285   4              Delay5ms(10);   //delay 0.10s
 286   4              
 287   4              for(j=0x30; j<=0x39; j++){
 288   5      
 289   5                //PutString("Transmitting letter: ");
 290   5                //PutChar(letter);
 291   5                //PutString("\r\n");
 292   5                TransmitPacket(j);
 293   5      
 294   5                Delay5ms(10);   //delay 0.15s
 295   5              }
 296   4            }
 297   3            
 298   3            for(i=0;i<5;i++)
 299   3              TransmitPacket(0x04);
 300   3            
 301   3            P00 = 1;
 302   3          }
C51 COMPILER V9.54   TESTRANGE                                                             08/05/2015 19:11:11 PAGE 6   

 303   2                
 304   2        }
 305   1      }
 306          
 307          void Receiver(void){
 308   1        unsigned char letter = 0x00;
 309   1        unsigned char headerFlag = 0;
 310   1        unsigned char endFlag = 1;
 311   1        TXEN = 0;
 312   1        
 313   1        PutString("\r\n \r\nReceiver started.");
 314   1        
 315   1        while(1){ 
 316   2          letter = ReceivePacket(); 
 317   2          
 318   2          //if letter is 0-9 or a-z
 319   2          if((letter >= 0x30 && letter <= 0x39)||(letter>=0x61 && letter<=0x7A)){
 320   3            P00 = 0;  //Turn on LED1
 321   3            
 322   3            //if letter is a-z, print new line
 323   3            if(letter>=0x61 && letter<=0x7A)
 324   3              PutString("\r\n");
 325   3            
 326   3            PutChar(letter);
 327   3            letter = 0x00;
 328   3          } else if(letter == 0x01){
 329   3            //to indicate transmitter just started
 330   3            if(headerFlag == 0){
 331   4              headerFlag = 1;
 332   4              endFlag = 0;
 333   4              PutString("\r\n \r\nNew Transmission:");
 334   4              letter = ReceivePacket();
 335   4              PutChar(letter);
 336   4            }
 337   3          } else if(letter == 0x04){
 338   3            if(endFlag == 0){
 339   4              headerFlag = 0;
 340   4              endFlag = 1;
 341   4              PutString("\r\nEnd of Transmission. \r\nEnter Comment: ");
 342   4              ConsoleComment();
 343   4            }
 344   3          }
 345   2        }
 346   1        
 347   1      }
 348          
 349          void main(){
 350   1        
 351   1        InitPin(0,0); //Initialize P00 for LED1
 352   1        InitPin(3,1);
 353   1        InitPin(5,1);
 354   1        
 355   1        P00 = 1;    //Initialize with LED1 turned OFF
 356   1        
 357   1        InitUART();
 358   1        InitRF();
 359   1        
 360   1        if(P03 == 0){
 361   2          Transmitter();
 362   2        } else if (P05 == 0){
 363   2          Receiver();
 364   2        }
C51 COMPILER V9.54   TESTRANGE                                                             08/05/2015 19:11:11 PAGE 7   

 365   1        
 366   1      }
 367          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    852    ----
   CONSTANT SIZE    =    100    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       9
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
